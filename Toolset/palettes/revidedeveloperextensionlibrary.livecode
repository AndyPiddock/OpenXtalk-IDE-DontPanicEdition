script "revIDEDeveloperExtensionLibrary"
local sExtensionDetailsA

private on __revIDEDeveloperExtensionSendWarning pWarning
   revIDEMessageSend "ideExtensionLog", "Warning:" && pWarning
end __revIDEDeveloperExtensionSendWarning

private on __revIDEDeveloperExtensionSendError pError
   revIDEMessageSend "ideExtensionLog", "Error:" && pError
end __revIDEDeveloperExtensionSendError

private on __revIDEDeveloperExtensionLog pLog
   revIDEMessageSend "ideExtensionLog", pLog
end __revIDEDeveloperExtensionLog

private on __revIDEDeveloperCompilationError pError, pFile
   local tLineNo, tChar, tEndChar, tLine
   # Parse out the error details to provide more meaningful feedback
   repeat for each line tErrLine in pError
      if matchText(tErrLine, ":([0-9]*):([0-9]*):", tLineNo, tChar) then
         put line tLineNo of url ("file:" & pFile) into tLine
         put tChar into tEndChar
         repeat while tChar is not 0 and char tChar - 1 of tLine is not " "
            subtract 1 from tChar
         end repeat
         revIDEMessageSend "ideExtensionLog", "Error: on line" && tLineNo && "(" & tLine & ")" & ":" && char tChar + 1 to tEndChar - 1 of tLine
      end if
   end repeat
   
   revIDEMessageSend "ideExtensionLog", "Error:" && pError
end __revIDEDeveloperCompilationError

private function __revIDEDeveloperLastModifiedTimeOfFile pFolder, pFile
   local tDetailedFiles
   set the defaultFolder to pFolder
   put the detailed files into tDetailedFiles
   return  item 5 of line lineOffset(tDetailedFiles, pFile) of tDetailedFiles
end __revIDEDeveloperLastModifiedTimeOfFile

private function __revIDEDeveloperExtensionShouldRecompile pFolder, pFile
   # To avoid excessive recompilation, test to see if the compiled module exists and is up to date.
   
   # Recompile because compiled module file is missing.
   if there is not a file (pFolder & slash & "module.lcm") then 
      return true
   end if
   
   # Recompile because manifest file is missing.
   if there is not a file (pFolder & slash & "manifest.xml") then 
      return true
   end if
   
   # Check timestamps to see if compiled module is out of date.
   local tLastCompiled, tLastModified
   put __revIDEDeveloperLastModifiedTimeOfFile(pFolder, "module.lcm") into tLastCompiled
   put __revIDEDeveloperLastModifiedTimeOfFile(pFolder, pFile) into tLastModified
   
   return tLastModified > tLastCompiled 
end __revIDEDeveloperExtensionShouldRecompile

function revIDEDeveloperExtensions
   local tExtensionDetailsA
   
   local tFolders
   if not revEnvironmentIsInstalled() then
      # Look for extension examples in git repo.
      put revEnvironmentRepositoryPath() & slash & "extensions" & slash & "widgets" & CR after tFolders 
      put revEnvironmentRepositoryPath() & slash & "extensions" & slash & "libraries" & CR after tFolders
   end if
   
   # Look for extension examples in previously selected user folders.
   put revIDEGetPreference("cDeveloperExtensionsFolders") after tFolders
   local tFolder, tExtensionFolders, tExtensionFolder, tFiles, tExtension
   repeat for each line tFolder in tFolders
      if tFolder is empty then
         next repeat
      end if
      set the defaultfolder to tFolder
      put the folders into tExtensionFolders
      repeat for each line tExtensionFolder in tExtensionFolders
         if tExtensionFolder is ".." then 
            next repeat
         end if
         put revIDEDeveloperExtension(tFolder & slash & tExtensionFolder) into tExtensionDetailsA[tFolder & slash & tExtensionFolder]
      end repeat
   end repeat
   
   put tExtensionDetailsA into sExtensionDetailsA
   return sExtensionDetailsA
end revIDEDeveloperExtensions

function revIDEDeveloperExtension pFolder
   set the defaultfolder to pFolder
   
   local tFiles
   put the files into tFiles
   filter tFiles with "*.lcb"
   
   local tFile
   # For now, if there are multiple lcb files in one folder, just use the first one.
   if the number of lines of tFiles > 1 then
      put line 1 of tFiles into tFile
      __revIDEDeveloperExtensionSendWarning "multiple lcb files in folder" && pFolder & ": using" && tFile
   else
      put tFiles into tFile
   end if
   return __revIDEDeveloperExtensionDetailsFromFile(pFolder, tFile)
end revIDEDeveloperExtension

private function __revIDEDeveloperExtensionDetailsFromFile pFolder, pFile
   local tDetailsA
   if not __revIDEDeveloperExtensionShouldRecompile(pFolder, pFile) then
      __revIDEDeveloperExtensionLog pFolder & slash & "module.lcm up to date"
      # The stored info is up to date.
      if sExtensionDetailsA[pFolder] is not empty then
         return sExtensionDetailsA[pFolder]
      end if
      # The compiled module and manifest are up to date, but we haven't fetched the information yet.
   else
      # The compiled module or manifest is not up to date, so compile.
      __revIDEDeveloperExtensionLog "Compiling module" && pFolder & slash & pFile
      __revIDEDeveloperCompileModule pFile, pFolder
      
      if the result is not empty then
         # This may be better as a warning, and try to parse info direct from the file.
         __revIDEDeveloperExtensionSendError the result
         return empty
      end if
   end if
   
   __revIDEDeveloperExtensionLog "Fetching metadata from" && pFolder & slash & "manifest.xml"
   __revIDEDeveloperExtensionFetchMetadata (pFolder & slash & "manifest.xml"), tDetailsA
   if the result is not empty then
      __revIDEDeveloperExtensionSendError the result
      return empty
   end if
   
   put pFile into tDetailsA["file"]
   
   # Check timestamps to see if API  is out of date.
   local tLastGenerated, tLastModified
   put __revIDEDeveloperLastModifiedTimeOfFile(pFolder, "api.lcdoc") into tLastGenerated
   put __revIDEDeveloperLastModifiedTimeOfFile(pFolder, pFile) into tLastModified
   if tLastModified > tLastGenerated then
      put revDocsGenerateDocsFileFromBuilderFile(pFolder & slash & pFile) into tDetailsA["api"]
   end if
   put tDetailsA into sExtensionDetailsA[pFolder]
   return tDetailsA
end __revIDEDeveloperExtensionDetailsFromFile

on revIDEDeveloperExtensionAddResourceFile pExtensionFolder, pResourcePath, pType
   if there is not a file pResourcePath then
      __revIDEDeveloperExtensionSendError the result
      exit revIDEDeveloperExtensionAddResourceFile
   end if
   
   local tResourceFolder
   put pExtensionFolder & slash & "resources" into tResourceFolder
   if there is not a folder tResourceFolder then
      create folder tResourceFolder
   end if
   
   set the itemdelimiter to slash
   switch pType
      case "icon"
         revCopyFile pResourcePath, pExtensionFolder & slash & "icon.png"
      case "retina_icon"
         revCopyFile pResourcePath, pExtensionFolder & slash & "icon@extra-high.png"
      case "api"
         revCopyFile pResourcePath, pExtensionFolder & slash & "api.lcdoc"
      case "guide"
         revCopyFile pResourcePath, pExtensionFolder & slash & "guide.md"
      default
         revCopyFile pResourcePath, tResourceFolder & slash & item -1 of pResourcePath
   end switch
   
   if the result is not empty then
      __revIDEDeveloperExtensionSendError "Failed to copy file:" && the result
   end if
end revIDEDeveloperExtensionAddResourceFile

on revIDEDeveloperExtensionAddResourceFolder pExtensionFolder, pResourceFolder
   if there is not a folder pResourceFolder then
      __revIDEDeveloperExtensionSendError "No such folder:" && pResourceFolder
      exit revIDEDeveloperExtensionAddResourceFolder
   end if
   
   local tResourceFolder
   put pExtensionFolder & slash & "resources" into tResourceFolder
   if there is not a folder tResourceFolder then
      create folder tResourceFolder
   end if
   
   revCopyFolder pResourceFolder, pExtensionFolder & slash & "resources"
   if the result is not empty then
      __revIDEDeveloperExtensionSendError "Failed to copy folder:" && the result
   end if
end revIDEDeveloperExtensionAddResourceFolder

on revIDEDeveloperExtensionTest pPath
   local tDetailsA
   put revIDEDeveloperExtension(pPath) into tDetailsA
   
   if tDetailsA["file"] is empty then
      __revIDEDeveloperExtensionSendError "No extension to test in" && pPath
      exit revIDEDeveloperExtensionTest
   end if
   
   if there is not a file (pPath & slash & "module.lcm") then
      __revIDEDeveloperExtensionSendError "No compiled module in" && pPath
      exit revIDEDeveloperExtensionTest
   end if
   
   __revIDEDeveloperExtensionLog "Launching in Test Window"
   
   __revIDEDeveloperExtensionLaunchTestStack pPath, tDetailsA
end revIDEDeveloperExtensionTest

private function __testStackScript
   local tScript
   put "on closeStackRequest;revIDEDeveloperExtensionClearTestStack;exit closeStackRequest;end closeStackRequest;on saveStackRequest;exit saveStackRequest;end saveStackRequest" into tScript
   replace ";" with return in tScript
   return tScript
end __testStackScript

private on __revIDEDeveloperExtensionLaunchTestStack pPath, pDetailsA
   if there is a stack "LiveCode Extension Test Window" then
      __revIDEDeveloperExtensionDoClearTestStack
   end if
   
   if there is a folder (pPath & slash & "resources") then
      load extension (pPath & slash & "module.lcm") 
   else
      load extension (pPath & slash & "module.lcm") with resource path (pPath & slash & "resources")
   end if
   create stack "LiveCode Extension Test Window"
   set the destroyStack of stack "LiveCode Extension Test Window" to true
   set the title of it to pDetailsA["name"]
   set the script of it to __testStackScript()
   go stack "LiveCode Extension Test Window"
   create widget as pDetailsA["id"]
   
   if there is not a widget 1 of  stack "LiveCode Extension Test Window" then
      __revIDEDeveloperExtensionSendError "failed to create widget" && pDetailsA["id"]
      __revIDEDeveloperExtensionDoClearTestStack
      exit __revIDEDeveloperExtensionLaunchTestStack
   end if
   set the cCurExtension of stack "LiveCode Extension Test Window" to pDetailsA["id"]
end __revIDEDeveloperExtensionLaunchTestStack

on revIDEDeveloperExtensionClearTestStack
   send "__revIDEDeveloperExtensionDoClearTestStack" to me in 5 millisecs
end revIDEDeveloperExtensionClearTestStack

on __revIDEDeveloperExtensionDoClearTestStack
   repeat while there is a widget 1 of stack "LiveCode Extension Test Window" 
      delete widget 1 of stack "LiveCode Extension Test Window"
   end repeat
   local tExtension
   put the cCurExtension of stack "LiveCode Extension Test Window" into tExtension
   delete stack "LiveCode Extension Test Window"
   if tExtension is not empty then
      unload extension tExtension
      __revIDEDeveloperExtensionLog "Unloading..."
   end if
end __revIDEDeveloperExtensionDoClearTestStack

on revIDEDeveloperExtensionInstall pPath
   local tDetailsA
   put revIDEDeveloperExtension(pPath) into tDetailsA
   
   if tDetailsA["file"] is empty then
      __revIDEDeveloperExtensionSendError "No extension to test in" && pPath
      exit revIDEDeveloperExtensionInstall
   end if
   
   if there is not a file (pPath & slash & "module.lcm") then
     __revIDEDeveloperExtensionSendError "No compiled module in" && pPath
      exit revIDEDeveloperExtensionInstall
   end if
   
   revIDEInstallExtension (pPath & slash & "module.lcm")
end revIDEDeveloperExtensionInstall

on revIDEDeveloperExtensionUninstall pPath
   local tDetailsA
   put revIDEDeveloperExtension(pPath) into tDetailsA
   
   if tDetailsA["id"] is empty then
      __revIDEDeveloperExtensionSendError "Extension id lost from" && pPath & ": cannot uninstall"
      exit revIDEDeveloperExtensionUninstall
   end if
   
   revIDEUninstallExtension tDetailsA["id"]
   
end revIDEDeveloperExtensionUninstall

on revIDEDeveloperExtensionEditScript pPath
   launch document pPath
   if the result is "no association" then
      answer file "Select text editor..."
      if it is not empty then
         launch pPath with it
      end if
   end if
end revIDEDeveloperExtensionEditScript

on revIDEDeveloperExtensionOpen pFolder
   local tDeveloperExtensionsFolders
   put revIDEGetPreference("cDeveloperExtensionsFolders") into tDeveloperExtensionsFolders
   
   set the itemdelimiter to slash
   local tRootFolder
   put item 1 to -2 of pFolder into tRootFolder
   if tDeveloperExtensionsFolders is empty then
      put tRootFolder into tDeveloperExtensionsFolders
   else
      if tRootFolder is not among the lines of tDeveloperExtensionsFolders then
         put return & tRootFolder after tDeveloperExtensionsFolders
      end if
   end if
   
   revIDESetPreference "cDeveloperExtensionsFolders", tDeveloperExtensionsFolders
   
   return revIDEDeveloperExtension(pFolder)
end revIDEDeveloperExtensionOpen

function __revIDEDeveloperExtensionFetchWidgetTemplateFile
   return url ("file:" & revIDESpecialFolderPath("Toolset") & slash & "widget_template.txt")
end __revIDEDeveloperExtensionFetchWidgetTemplateFile

function __revIDEDeveloperExtensionFetchTemplate pDataA
   local tTemplate
   if pDataA["type"] is "widget" then
      put __revIDEDeveloperExtensionFetchWidgetTemplateFile() into tTemplate
   else
      put __revIDEDeveloperExtensionFetchLibraryTemplateFile() into tTemplate
   end if
end __revIDEDeveloperExtensionFetchTemplate

on revIDEDeveloperExtensionNew pDataA
   local tTemplate
   put __revIDEDeveloperExtensionFetchTemplate(pDataA) into tTemplate
   if tTemplate is empty then
      return empty
   end if
   put merge(tTemplate) into url("file:" & pDataA["path"] & slash & pDataA["name"] & ".lcb")
end revIDEDeveloperExtensionNew

private on __revIDEDeveloperExtensionFetchMetadata pManifestPath, @rDataA
   local tDataA
   
   local tManifestContents, tId
   put url ("file:" & pManifestPath) into tManifestContents
   put revXMLCreateTree(tManifestContents,true,true,false) into tId
   
   if tId begins with "xmlerr" then
      return "Error: invalid xml in manifest"
   end if
   
   local tTargetName
   put textDecode(revXMLNodeContents(tId, "/package/name"), "utf-8") into tTargetName
   
   if tTargetName begins with "xmlerr" then
      __revIDEDeveloperExtensionSendError "couldn't retrieve extension name from manifest" && pManifestPath
      exit __revIDEDeveloperExtensionFetchMetadata
   end if
   
   set the itemdelimiter to "."
   if not tTargetName begins with "com.livecode.extensions" or the number of items of tTargetName is not 5 then
      __revIDEDeveloperExtensionSendWarning "extension name has invalid identifier (" & tTargetName & ") - must be com.livecode.extensions.<yourId>.<extensionTitle>"
   end if
   put tTargetName into tDataA["id"]
   
   local tTargetTitle
   put textDecode(revXMLNodeContents(tId, "/package/title"), "utf-8") into tTargetTitle
   
   if tTargetTitle is empty or tTargetTitle begins with "xmlerr" then
      __revIDEDeveloperExtensionSendWarning "couldn't retrieve title from" && tTargetName && "manifest - ensure .lcb file has 'metadata title is " & quote & "<title>" & quote & "'"
      put empty into tTargetTitle
   end if
   put tTargetTitle into tDataA["name"]
   
   local tTargetVersion
   put textDecode(revXMLNodeContents(tId, "/package/version"), "utf-8") into tTargetVersion
   
   if tTargetVersion is empty or tTargetVersion begins with "xmlerr" then
      __revIDEDeveloperExtensionSendWarning "couldn't retrieve version from" && tTargetName && "manifest - ensure .lcb file has 'metadata version is " & quote & "<version>" & quote & "'"
      put empty into tTargetVersion
   end if
   
   if the number of items of tTargetVersion is not 3 then
      __revIDEDeveloperExtensionSendWarning "extension name has invalid identifier (" & tTargetVersion & ") - must be <major>.<minor>.<revision>"
   end if
   put tTargetVersion into tDataA["version"]
   
   local tTargetAuthor
   put textDecode(revXMLNodeContents(tId, "/package/author"), "utf-8") into tTargetAuthor
   
   if tTargetAuthor is empty or tTargetAuthor begins with "xmlerr" then
      __revIDEDeveloperExtensionSendWarning "couldn't retrieve author from" && tTargetName && "manifest - ensure .lcb file has 'metadata author is " & quote & "<author_name>" & quote & "'"
      put empty into tTargetAuthor
   end if
   put tTargetAuthor into tDataA["author"]
   
   put tDataA into rDataA
   return empty
end __revIDEDeveloperExtensionFetchMetadata

private function shellFormat pArg, pSwitch
   local tOutput
   
   if pSwitch is not empty then
      put "--" & pSwitch & " " into tOutput
   end if
   
   return tOutput & quote & pArg & quote & " "
end shellFormat

private command __revIDEDeveloperCompileModule pFile, pTargetFolder
   # The manifest is currently always generated from the source
   if there is a file (pTargetFolder & slash & "manifest.xml") then
      delete file (pTargetFolder & slash & "manifest.xml")
   end if
   
   local tResourcePath
   if revEnvironmentIsInstalled() is false then
      put revEnvironmentBinariesPath() into tResourcePath
   else
      put revIDESpecialFolderPath("Toolchain") into tResourcePath
   end if
   
   # Build the shell command
   local tShellCommand
   
   # The actual compile command
   if the platform is "win32" then
      put shellFormat(tResourcePath & slash & "lc-compile.exe") into tShellCommand
   else
      put shellFormat(tResourcePath & slash & "lc-compile") into tShellCommand
   end if
   # The folder to put the .lci file
   put shellFormat(pTargetFolder, "modulepath") after tShellCommand
   
   # The built-in module path
   put shellFormat(tResourcePath & slash & "modules", "modulepath") after tShellCommand
   
   --put shellFormat(revEnvironmentCustomizationPath() & slash & "modules", "modulepath") after tShellCommand
   
   # The manifest target
   put shellFormat(pTargetFolder & slash & "manifest.xml", "manifest") after tShellCommand
   
   # The output
   put shellFormat(pTargetFolder & slash & "module.lcm", "output") after tShellCommand
   
   # The target .lcb file
   put shellFormat(pFile) after tShellCommand
   
   local tResult
   put shell(tShellCommand) into tResult
   
   # If this is installed then the output of lc-compile should be empty.
   if revEnvironmentIsInstalled() then
      if tResult is not empty then
         __revIDEDeveloperCompilationError tResult
         return "failed to compile module"
      end if
   else
      if not (the last line of (word 1 to -1 of tResult) contains "generated module") then
         __revIDEDeveloperCompilationError tResult
         return "failed to compile module"
      end if
   end if
   
   if there is not a file (pTargetFolder & slash & "module.lcm") then
      return "failed to compile module"
   end if
   
   if there is not a file (pTargetFolder & slash & "manifest.xml") then
      return "failed to generate manifest"
   end if
   
   return empty
end __revIDEDeveloperCompileModule

private command __revIDEDeveloperBuildPackage pChosenModule, pTargetDirectory
   local tFullPath
   put pChosenModule into tFullPath
   
   if there is not a file tFullPath then
      return "Error: missing file" && tFullPath
   end if
   
   local tFolder, tFilename, tSourceFolder
   set the itemdelimiter to slash
   put item -1 of tFullPath into tFilename
   put item 1 to -2 of tFullPath into tSourceFolder
   
   put the temporary folder into tFolder
   
   local tName
   set the itemdelimiter to "."
   put item 1 to -2 of tFilename into tName
   
   local tError
   local tCompiledPath, tManifestPath
   put tFolder & slash & "module.lcm" into tCompiledPath   
   put tFolder & slash & "manifest.xml" into tManifestPath
   
   // compile the module
   put __revIDEDeveloperCompileModule(tFullpath, tFolder) into tError
   
   if tError is not empty then
      return "Error: couldn't compile module"
   end if
   
   // fetch name from manifest
   local tTargetName, tTargetVersion, tTargetTitle
   put fetchMetadata(tManifestPath, tTargetName, tTargetVersion, tTargetTitle) into tError
   
   if tError is not empty then
      return "Error:" && tError
   end if
   
   local tArchive
   if pTargetDirectory is not empty then
      put pTargetDirectory & slash & tTargetName & "." & tTargetVersion & ".lce" into tArchive
   else
      put revEnvironmentCustomizationPath() & slash & tTargetName & "." & tTargetVersion & ".lce" into tArchive
   end if
   
   if there is a file tArchive then
      delete file tArchive
   end if
   revZipOpenArchive tArchive, "write"
   
   if the result begins with "ziperr" then
      return "Error: couldn't open zip archive"
   end if
   
   local tDeleteApi
   if there is not a file (tFolder & slash & "api.lcdoc") then
      put true into tDeleteApi
   else
      put false into tDeleteApi
   end if
   
   if pChosenModule is empty then
      local tIcon
      local tRetinaIcon
      local tGuide
      local tDocs
      
      put (tSourceFolder & slash & "icon.png") into tIcon
      if there is not a file tIcon then
         answer file "Select icon file" with type "|png|"
         if it is empty then
            put "Must select an icon" into tError
         end if
         put it into tIcon
      end if
      
      put (tSourceFolder & slash & "icon@extra-high.png") into tRetinaIcon
      if there is not a file tRetinaIcon then
         answer file "Select retina icon file" with type "|png|"
         if it is empty then
            put "Must select a retina icon" into tError
         end if
         put it into tRetinaIcon
      end if
      
      put (tSourceFolder & slash & "guide.md") into tGuide
      if there is not a file tGuide then
         put empty into tGuide
      end if
      
      put (tSourceFolder & slash & "api.lcdoc") into tDocs
      if there is not a file tDocs then
         put empty into tDocs
      end if
   end if
   
   if tError is empty then
      put __revIDEDeveloperExtensionAddFilesToPackage(tArchive, tFolder, tFullPath) into tError
   end if
   
   if tError is empty then
      revZipCloseArchive tArchive
      
      if the result begins with "ziperr" then
         put "Error: couldn't close zip archive" into tError
      end if
   end if
   
   if tDeleteApi then
      delete file tFolder & slash & "api.lcdoc"
   end if
   
   if tError is not empty then
      return "Error" & tError
   end if
   
   answer "Package" && tArchive && "built successfully"
   
end __revIDEDeveloperBuildPackage

private function __revIDEDeveloperExtensionAddFilesToPackage pArchive, pFolder, pSource
   local tError
   
   local tModule
   put pFolder & slash & "module.lcm" into tModule
   
   // Check manifest
   if tError is empty then
      local tManifest
      put pFolder & slash & "manifest.xml" into tManifest
      
      if there is not a file tManifest then
         put "failed to create manifest" into tError
      end if
   end if
   
   // Add user guide
   if tError is empty then
      local tUserGuide
      put pFolder & slash & "guide.md" into tUserGuide
      
      if there is not a file tUserGuide then
         put empty into tUserGuide
      end if
   end if
   
   if tError is empty then
      local tIcon
      put pFolder & slash & "icon.png" into tIcon
      
      if there is not a file tIcon then
         put "no icon" into tError
      end if
   end if
   
   if tError is empty then
      local tRetinaIcon
      put pFolder & slash & "icon@extra-high.png" into tRetinaIcon
      
      if there is not a file tRetinaIcon then
         put "no retina icon" into tError
      end if
   end if
   
   local tIconList
   if tError is empty then
      get the files
      filter it with "icon@*.png"
      
      repeat for each line tFile in it
         if tFile is "icon@extra-high.png" then
            next repeat
         end if
         put pFolder & slash & tFile & CR after tIconList
      end repeat
      delete the last char of tIconList
   end if
   
   // Add docs
   local tDocList
   if tError is empty then
      local tDocs
      set the defaultfolder to pFolder
      get the files
      filter it with "*.lcdoc"
      if it is not empty then
         repeat for each line tDoc in it
            if tDoc is "api.lcdoc" then
               next repeat
            end if
            put pFolder & slash & tDoc & CR after tDocList
         end repeat
         delete the last char of tDocList
      end if
   end if
   
   local tAPI
   if tError is empty then
      if there is a file (pFolder & slash & "api.lcdoc") then
         put pFolder & slash & "api.lcdoc" into tAPI
      end if
   end if
   
   local tResourcesFolder
   if tError is empty then
      if there is a folder (pFolder & slash & "resources") then
         put pFolder & slash & "resources" into tResourcesFolder
      end if
   end if
   
   if tError is empty then
      return __revIDEDeveloperExtensionAddSpecifiedFilesToPackage(pSource, pFolder, pArchive, tModule, tIcon, tRetinaIcon, tIconList, tUserGuide, tAPI, tDocList, tResourcesFolder)
   end if
   
   return tError
end __revIDEDeveloperExtensionAddFilesToPackage

private function __revIDEDeveloperExtensionAddSpecifiedFilesToPackage pSource, pFolder, pArchive, pModule, pIcon, pRetinaIcon, pIconList, pGuide, pDocs, pDocList, pResourcesFolder
   local tError
   
   set the itemdelimiter to slash
   // Add source into package
   revZipAddItemWithFile pArchive, item -1 of pSource, pSource
   
   if the result begins with "ziperr" then
      put "couldn't add source" into tError
   end if
   
   // Add module into package
   revZipAddItemWithFile pArchive, "module.lcm", pModule
   
   if the result begins with "ziperr" then
      put "couldn't add module" into tError
   end if
   
   // Add manifest into package
   if tError is empty then
      revZipAddItemWithFile pArchive, "manifest.xml", pFolder & slash & "manifest.xml"
      
      if the result begins with "ziperr" then
         put "couldn't add manifest" into tError
      end if
   end if
   
   // Add user guide
   if tError is empty then
      revZipAddItemWithFile pArchive, "docs/guide/guide.md", pGuide
      
      if the result begins with "ziperr" then
         put "couldn't add guide" into tError
      end if
   end if
   
   // Add icons
   if tError is empty then
      revZipAddItemWithFile pArchive, "support/icon.png", pIcon
      
      if the result begins with "ziperr" then
         put "couldn't add icon.png" into tError
      end if
   end if
   
   if tError is empty then
      revZipAddItemWithFile pArchive, "support/icon@extra-high.png", pRetinaIcon
      
      if the result begins with "ziperr" then
         put "couldn't add icon@extra-high.png" into tError
      end if
   end if
   
   if tError is empty and pIconList is not empty then
      repeat for each line tLine in pIconList
         set the itemdelimiter to slash
         revZipAddItemWithFile pArchive, "support/" & item -1 of tLine, tLine
         
         if the result begins with "ziperr" then
            put "couldn't add icon" & tLine into tError
         end if
      end repeat
   end if
   
   // Add docs
   if tError is empty then
      if pDocs is empty then
         local tDocs
         put revDocsGenerateDocsFileFromModularFile(pSource) into tDocs
         if tDocs is empty then
            logToConsole "Warning: docs formatting error. Docs may be empty"
         end if
         put textEncode(tDocs, "utf-8") into url ("binfile:" & pFolder & slash & "api.lcdoc")
         revZipAddUncompressedItemWithFile pArchive,"docs/api/api.lcdoc", pFolder & slash & "api.lcdoc"
      else
         set the itemdelimiter to slash
         get item -1 of pDocs
         revZipAddItemWithFile pArchive, "docs/api/" & it, pDocs
      end if
      if the result begins with "ziperr" then
         put "couldn't add doc " & pDocs into tError
      end if
   end if
   
   if tError is empty and pDocList is not empty then
      repeat for each line tLine in pDocList
         set the itemdelimiter to slash
         revZipAddItemWithFile pArchive, "docs/api/" & item -1 of tLine, tLine
         
         if the result begins with "ziperr" then
            put "couldn't add doc" & tLine into tError
         end if
      end repeat
   end if
   
   // Add resources
   if tError is empty and pResourcesFolder is not empty then
      set the defaultfolder to pResourcesFolder
      local tFiles
      put the files into tFiles
      repeat for each line tLine in tFiles
         revZipAddItemWithFile pArchive, "resources/" & tLine, pResourcesFolder & slash & tLine
         
         if the result begins with "ziperr" then
            put "couldn't add resource" && pResourcesFolder & slash & tLine into tError
         end if
      end repeat
   end if
   
   return tError
end __revIDEDeveloperExtensionAddSpecifiedFilesToPackage
